import streamlit as st
import pandas as pd
import inspect
from utils import analiseDeVibracaoLisas as avl
from utils import analiseDeVibracaoRugosas as avr

def mostrar():
    st.write("## An√°lise de vibra√ß√£o")
    st.write("A ideia do c√≥digo √© resolver o estudo de caso do livro **'M√©todos Num√©ricos para Engenharia, Quinta Edi√ß√£o'**. O estudo de caso consiste em encontrar as vari√°veis que satisfazem a equa√ß√£o da mola de fomra que o carro estabilize de fomra aceit√°vel.")
    st.write("O livro traz a an√°lise em duas etapas. A mais simples leva em considera√ß√£o estradas lisas, com ela, conseguimos obter *k* que seria a constante da mola. Tendo o valor de *k*, podemos aplicar a segunda etapa, que leva em considera√ß√£o estradas rugosas. Nessa etapa, conseguimos encontrar o valor de *œâp*, que √© a raz√£o entre a frequ√™ncia de excita√ß√£o e a frequ√™ncia natural.")
    st.write("### Etapa 1: Aplicando em estradas lisas, achando a constante da mola")

    source_code = inspect.getsource(avl)
    st.code(source_code, language="python")
    st.download_button(
        label="üì• Baixar c√≥digo-fonte (Lisas)",
        data=source_code,
        file_name="analiseDeVibracaoLisas.py",
        mime='text/plain'
    )

    st.write("#### Explicando o c√≥digo:")
    st.markdown(r"""
    Aqui utilizamos a equa√ß√£o da dist√¢ncia da mola em rela√ß√£o √† posi√ß√£o de equil√≠brio em fun√ß√£o do tempo em sistemas subamortecidos, que √© dada por:  

    $$
    x(t) = \cos(0.05\mu) + \frac{\lambda}{\mu} \cdot \sin(0.05\mu)  
    $$  

    Abrindo essa equa√ß√£o com as f√≥rmulas:  

    $$
    \mu = \frac{\sqrt{|c^2 - 4mk|}}{2m}
    $$

    e

    $$
    \lambda = \frac{c}{2m}
    $$

    Temos:

    $$
    x(t) = \cos\left(0.05 \cdot \sqrt{\frac{k}{m} - \frac{c^2}{4m^2}}\right) + \frac{c}{\sqrt{4km - c^2}} \cdot \sin\left(0.05 \cdot \sqrt{\frac{k}{m} - \frac{c^2}{4m^2}}\right)
    $$

    Sabendo que **x** precisa ser **igual** a **0** pela primeira vez quando **t = 0,05**, **m = 1.2 x 10^6** g e c = 1 x 10^7 g/s, podemos substituir esses valores na equa√ß√£o e procurar o valor de ****\( k \)****.

    ##### Achando o **\( k \)**:
    Para achar o **\( k \)**, optamos por utilizar o m√©todo da bisse√ß√£o, assim como o livro. Optamos por esse m√©todo no c√≥digo por sua similaridade com o m√©todo de busca bin√°ria. Para come√ßar o m√©todo da bisse√ß√£o, escolhemos **\( k _1\)** e **\( k _2\)** tais que, se **\( k _1\)** aplicado na equa√ß√£o resulta em um n√∫mero positivo, ent√£o **\( k _2\)** deve resultar em um negativo.  
    
    A partir desses valores, fazemos itera√ß√µes para encontrar um valor de *k* que zere a equa√ß√£o. A cada itera√ß√£o escolhemos como *k* o ponto m√©dio entre os dois √∫ltimos valores e c√°lculamos o resultado da equa√ß√£o que queremos achar a raiz.  

    Se o resultado for positivo, substitu√≠mos o *k* anterior que resultou em positivo, caso contr√°rio, substitu√≠mos o *k* que resultou em negativo.  

    Dessa forma, vamos refinando o valor de *k* at√© encontrar um valor que zere a equa√ß√£o ou pelo menos uma aproxima√ß√£o com erro aceit√°vel.
                
    O livro prop√µe dois valores iniciais para **\( k _1\)** e **\( k _2\)**. Atrav√©s do esbo√ßo de um gr√°fico da equa√ß√£o, √© poss√≠vel aproximar uma op√ß√£o de valor com um resultado maior e outro menor que 0.  

    Ap√≥s a sele√ß√£o dos dois valores, podemos simplesmente fazer itera√ß√µes e calcular o resultado usando:

    $$
    k = \frac{k_1 + k_2}{2}
    $$

    O c√≥digo calcula o resultado para esse **\( k \)** e substitui o **\( k _1\)** ou **\( k _2\)** de acordo com o resultado. Dessa forma, podemos aproximar um valor de **\( k \)** que zere a equa√ß√£o.
    """)

    st.pyplot(avl.getGraph())
    st.pyplot(avl.getGraphEvoK())
    st.write("""Ao observar os gr√°ficos podemos notar como o m√©todo na bissetriz auxiliou na resolu√ß√£o do problema. 
            Conseguimos ver que o pr√≥ximo resultado sempre est√° entre os dois √∫ltimos""")
    st.write("#### Tabela de itera√ß√µes do m√©todo da bisse√ß√£o:")
    st.dataframe(avl.dataframe, hide_index=True)
    csv = avl.dataframe.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• Baixar tabela como CSV",
        data=csv,
        file_name="k_por_iteracao.csv",
        mime='text/csv'
    )
    st.write("Observe que na tabela conseguimos ver os valores de **\( k _1\)**, **\( k _2\)**, **\( k \)** e o resultado da equa√ß√£o para cada itera√ß√£o do m√©todo da bisse√ß√£o.")

    st.write("### Etapa 2: Aplicando em estradas rugosas")
    st.write("A segunda parte da an√°lise de vibra√ß√£o considera que o ve√≠culo est√° passando por estradas rugosas.")
    st.write("Nessa situa√ß√£o, usamos uma equa√ß√£o diferente, levando em conta a frequ√™ncia de excita√ß√£o provocada pelas irregularidades da pista.")

    st.write("### Equa√ß√£o utilizada:")
    st.latex(r"""
    f(\omega_p) = 2 \cdot \sqrt{(1 - \omega_p^2)^2 + 4 \cdot \zeta^2 \cdot \omega_p^2} - 1
    """)

    st.markdown(r"""
    Onde:  
    - $\omega_p = \frac{\omega}{\omega_n}$ √© a raz√£o entre a frequ√™ncia de excita√ß√£o $\omega$ e a frequ√™ncia natural $\omega_n$.  
    - $\zeta = \frac{c}{2 \sqrt{k \cdot m}}$ √© o fator de amortecimento cr√≠tico.    

    Utilizamos novamente o **m√©todo da bisse√ß√£o** para encontrar o valor de $\omega_p$ que zera essa equa√ß√£o, observe que para acharmos $\zeta precisamos do **\(k\)**.
    """, unsafe_allow_html=True)

    st.write("C√≥digo fonte da an√°lise de vibra√ß√£o em estradas rugosas:")
    source_code = inspect.getsource(avr)
    st.code(source_code, language="python")
    st.download_button(
        label="üì• Baixar c√≥digo-fonte (Rugosas)",
        data=source_code,
        file_name="analiseVibracaoRugosas.py",
        mime='text/plain'
    )

    st.write("#### Tabela de itera√ß√µes do m√©todo da bisse√ß√£o:")
    st.dataframe(avr.dataFrame, hide_index=True)

    csv = avr.dataFrame.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• Baixar tabela como CSV",
        data=csv,
        file_name="omega_p_por_iteracao.csv",
        mime='text/csv'
    )

    st.markdown("#### Gr√°fico da fun√ß√£o $f(\\omega_p)$:", unsafe_allow_html=True)
    st.pyplot(avr.getGraph())

    st.markdown("#### Evolu√ß√£o do valor de $\\omega_p$ ao longo das itera√ß√µes:", unsafe_allow_html=True)
    st.pyplot(avr.getGraphEvoK())

    st.markdown(r"""
    Observando os gr√°ficos, podemos ver o comportamento da fun√ß√£o $f(\omega_p)$ e como o m√©todo da bisse√ß√£o vai refinando o valor de $\omega_p$ at√© atingir a condi√ß√£o de equil√≠brio (valor pr√≥ximo de zero) assim como vimos ocorrer na primeira etapa.
    """, unsafe_allow_html=True)

    st.write("#### Gr√°fico da posi√ß√£o do carro ao longo do tempo:")
    st.pyplot(avr.getGraphXt())
    st.write("""Ap√≥s acharmos o valor de $\omega_p$ e **\(k\)**, podemos calcular a posi√ß√£o do carro ao longo do tempo utilizando a equa√ß√£o da posi√ß√£o da mola em rela√ß√£o ao tempo, considerando o amortecimento e a frequ√™ncia de excita√ß√£o.
            Observe que o ponto em que o sistema entra em equil√≠brio pela primeira vez √© em t = 0.05 assim como solicitado. Observe tamb√©m que o gr√°fico corresponde muito bem ao esperado de um sistema subamortecido, onde a posi√ß√£o do carro oscila em torno de um valor de equil√≠brio antes de se estabilizar.""")